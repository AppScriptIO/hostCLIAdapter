"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.singleScriptExecution = singleScriptExecution;var _executeOnRequire = require("./executionAlgorithm/executeOnRequire.js");
var _executeOnCall = require("./executionAlgorithm/executeOnCall.js");
var _executeUsingArbitraryCode = require("./executionAlgorithm/executeUsingArbitraryCode.js");
var _installScriptModule = require("./utility/installScriptModule.js");






















async function singleScriptExecution({
  scriptConfig,
  parameter,
  shouldInstallModule = false,
  jsCodeToEvaluate })
{

  process.argv[1] = scriptConfig.path || process.argv[1];

  if (shouldInstallModule)
  await (0, _installScriptModule.installEntrypointModule)({ scriptPath: scriptConfig.path });

  if (jsCodeToEvaluate) {
    scriptConfig.type = 'evaluateCode';
    scriptConfig.jsCodeToEvaluate = jsCodeToEvaluate;
  }

  scriptConfig.type = scriptConfig.type || 'script';

  switch (scriptConfig.type) {
    case 'script':
      (0, _executeOnRequire.executeOnRequire)({ scriptPath: scriptConfig.path, parameter });
      break;
    case 'module':
      (0, _executeOnCall.executeOnCall)({ scriptPath: scriptConfig.path, methodName: scriptConfig.methodName, parameter, adapterFunction: scriptConfig.adapterFunction });
      break;
    case 'evaluateCode':
      (0, _executeUsingArbitraryCode.executeUsingArbitraryCode)({ scriptPath: scriptConfig.path, jsCodeToEvaluate: scriptConfig.jsCodeToEvaluate, parameter, adapterFunction: scriptConfig.adapterFunction });
      break;
    default:
      throw new Error(`â€¢ Failed to execute script, as the 'scriptConfig.type' isn't recognized.`);
      break;}

}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NvdXJjZS9leGVjdXRlLmpzIl0sIm5hbWVzIjpbInNpbmdsZVNjcmlwdEV4ZWN1dGlvbiIsInNjcmlwdENvbmZpZyIsInBhcmFtZXRlciIsInNob3VsZEluc3RhbGxNb2R1bGUiLCJqc0NvZGVUb0V2YWx1YXRlIiwicHJvY2VzcyIsImFyZ3YiLCJwYXRoIiwic2NyaXB0UGF0aCIsInR5cGUiLCJtZXRob2ROYW1lIiwiYWRhcHRlckZ1bmN0aW9uIiwiRXJyb3IiXSwibWFwcGluZ3MiOiJpSUFBQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF1Qk8sZUFBZUEscUJBQWYsQ0FBcUM7QUFDeENDLEVBQUFBLFlBRHdDO0FBRXhDQyxFQUFBQSxTQUZ3QztBQUd4Q0MsRUFBQUEsbUJBQW1CLEdBQUcsS0FIa0I7QUFJeENDLEVBQUFBLGdCQUp3QyxFQUFyQztBQUtKOztBQUVDQyxFQUFBQSxPQUFPLENBQUNDLElBQVIsQ0FBYSxDQUFiLElBQWtCTCxZQUFZLENBQUNNLElBQWIsSUFBcUJGLE9BQU8sQ0FBQ0MsSUFBUixDQUFhLENBQWIsQ0FBdkM7O0FBRUEsTUFBR0gsbUJBQUg7QUFDSSxRQUFNLGtEQUF3QixFQUFFSyxVQUFVLEVBQUVQLFlBQVksQ0FBQ00sSUFBM0IsRUFBeEIsQ0FBTjs7QUFFSixNQUFHSCxnQkFBSCxFQUFxQjtBQUNqQkgsSUFBQUEsWUFBWSxDQUFDUSxJQUFiLEdBQW9CLGNBQXBCO0FBQ0FSLElBQUFBLFlBQVksQ0FBQ0csZ0JBQWIsR0FBZ0NBLGdCQUFoQztBQUNIOztBQUVESCxFQUFBQSxZQUFZLENBQUNRLElBQWIsR0FBb0JSLFlBQVksQ0FBQ1EsSUFBYixJQUFxQixRQUF6Qzs7QUFFQSxVQUFRUixZQUFZLENBQUNRLElBQXJCO0FBQ0ksU0FBSyxRQUFMO0FBQ0ksOENBQWlCLEVBQUVELFVBQVUsRUFBRVAsWUFBWSxDQUFDTSxJQUEzQixFQUFpQ0wsU0FBakMsRUFBakI7QUFDSjtBQUNBLFNBQUssUUFBTDtBQUNJLHdDQUFjLEVBQUVNLFVBQVUsRUFBRVAsWUFBWSxDQUFDTSxJQUEzQixFQUFpQ0csVUFBVSxFQUFFVCxZQUFZLENBQUNTLFVBQTFELEVBQXNFUixTQUF0RSxFQUFpRlMsZUFBZSxFQUFFVixZQUFZLENBQUNVLGVBQS9HLEVBQWQ7QUFDSjtBQUNBLFNBQUssY0FBTDtBQUNJLGdFQUEwQixFQUFFSCxVQUFVLEVBQUVQLFlBQVksQ0FBQ00sSUFBM0IsRUFBaUNILGdCQUFnQixFQUFFSCxZQUFZLENBQUNHLGdCQUFoRSxFQUFrRkYsU0FBbEYsRUFBNkZTLGVBQWUsRUFBRVYsWUFBWSxDQUFDVSxlQUEzSCxFQUExQjtBQUNKO0FBQ0E7QUFDSSxZQUFNLElBQUlDLEtBQUosQ0FBVywwRUFBWCxDQUFOO0FBQ0osWUFaSjs7QUFjSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGV4ZWN1dGVPblJlcXVpcmUgfSBmcm9tIFwiLi9leGVjdXRpb25BbGdvcml0aG0vZXhlY3V0ZU9uUmVxdWlyZS5qc1wiXG5pbXBvcnQgeyBleGVjdXRlT25DYWxsIH0gZnJvbSBcIi4vZXhlY3V0aW9uQWxnb3JpdGhtL2V4ZWN1dGVPbkNhbGwuanNcIlxuaW1wb3J0IHsgZXhlY3V0ZVVzaW5nQXJiaXRyYXJ5Q29kZSB9IGZyb20gXCIuL2V4ZWN1dGlvbkFsZ29yaXRobS9leGVjdXRlVXNpbmdBcmJpdHJhcnlDb2RlLmpzXCJcbmltcG9ydCB7IGluc3RhbGxFbnRyeXBvaW50TW9kdWxlIH0gZnJvbSAnLi91dGlsaXR5L2luc3RhbGxTY3JpcHRNb2R1bGUuanMnXG5cbi8qKlxuICogU3luY2hyb25vdXNseSBleGVjdXRlIGEgc2luZ2xlIHNjcmlwdCB1c2luZyBhIGBzY3JpcHQgY29uZmlndXJhdGlvbmAgb2JqZWN0IHRoYXQgaG9sZHMgdGhlIHNldHRpbmdzIHRoYXQgc2hvdWxkIGJlIHVzZWQgdG8gcnVuIHRoZSBzY3JpcHQuXG4gKiBAcGFyYW0gc2NyaXB0Q29uZmlnID0geyB0eXBlOiAnbW9kdWxlJyB8fCAnc2NyaXB0JywgcGF0aCB9XG4gKiBcbiAqIEphdmFzY3JpcHQgc2NyaXB0cyB3aXQgZGlmZmVyZW50IGBzY3JpcHRDb25maWcudHlwZWAgd291bGQgYmUgZXhlY3V0ZWQgaW4gdGhlIGZvbGxvd2luZyB3YXk6IFxuICog4oCiIGBzY3JpcHRgIC0gSW1tZWRpYXRlbHkgZXhlY3V0ZWQgYnkgcmVxdWlyaW5nIHRoZSBmaWxlLlxuICog4oCiIGBtb2R1bGVgIC0gXG4gKiAgICAgIOKXiyBSZXF1aXJlZCBmdW5jdGlvbiBhbmQgdGhlbiBleGVjdXRlZC4gXG4gKiAgICAgIOKXiyBSZXF1aXJlZCB3aXRoIGFuIGV4cG9ydGVkIG5hbWUgYW5kIHRoZW4gZXhlY3V0ZWQgYXMgYSBmdW5jdGlvbi5cbiAqIOKAoiBganNDb2RlVG9FdmFsdWF0ZWAgLSBhbGxvd3MgdGhlIGV4ZWN1dGlvbiBvZiBtb2R1bGVzIChleHBvcnRlZCB2YWx1ZXMpIHVzaW5nIHRoZSBhcGkgZnJvbSBjb21tYW5kbGluZSBieSBwYXNzaW5nIGpzIGNvZGUgYXMgY29tbWFuZGxpbmUgYXJndW1lbnQuXG4gKiBcbiAqIGBzY3JpcHRDb25maWcuYWRhcHRlckZ1bmN0aW9uYCAtIGEgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGNhbGxlZCBhcyBhbiBpbnRlcm1lZGlhdGUgdG8gdGhlIHNjcmlwdCwgdGhpcyBhbGxvd3MgY3VzdG9tIGNhbGxpbmcgb2Ygc2NyaXB0cyB0byBzdXBwb3J0IGN1c3RvbSBpbXBsZW1lbnRhdGlvbiBvZiBpbnRlcmZhY2VzLlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludGVybWVkaWF0ZSBmdW5jdGlvbiBpbXBsZW1lbnRzIHRoZSBpbnRlcmZhY2UgdGhhdCB0aGUgY2xpZW50IGV4cGVjdHMuIGNoYW5nZSBwYXJhbWV0ZXIgbmFtaW5nIHRvIG1hdGNoIHRoYXQgb2YgdGhlIHNjcmlwdC5cbiAqIFxuICogIyBFeGFtcGxlIFxuICogYCh7IGNhbGxiYWNrLCBhcmdzIH0pID0+IHtcbiAqICAgLy8gY2hhbmdlIGFwaSB0byBzcGVjaWZpYyBzY3JpcHQgcGFyYW1ldGVyIG5hbWVcbiAqICAgYXJnc1swXS50YXJnZXRQcm9qZWN0ID0gYXJnc1swXS5hcGkucHJvamVjdFxuICogICByZXR1cm4gKCkgPT4gY2FsbGJhY2soLi4uYXJncykgLy8gc3BlY2lmaWMgaW50ZXJmYWNlIG9mIHRoZSBjYWxsYmFja1xuICogfWAgICAgICAgICAgICBcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNpbmdsZVNjcmlwdEV4ZWN1dGlvbih7IFxuICAgIHNjcmlwdENvbmZpZywgXG4gICAgcGFyYW1ldGVyLCAvLyBAdHlwZSBhcnJheSAtIHBhcmFtZXRlciB0aGF0IHNob3VsZCBiZSBleGVjdXRlZCB3aXRoIHRoZSBzY3JpcHQuIC8vIGFuIGFycmF5IG9mIGZ1bmN0aW9uIHBhcmFtZXRlcnMgdGhhdCBzaG91bGQgYmUgcGFzc2VkIHRvIHRoZSB0YXJnZXQgc2NyaXB0LlxuICAgIHNob3VsZEluc3RhbGxNb2R1bGUgPSBmYWxzZSwgLy8gaWYgc2hvdWxkIGluc3RhbGwgbm9kZV9tb2R1bGVzIGRlcGVuZGVuY2llcyBvZiB0aGUgc2NyaXB0IHRvIGJlIGV4ZWN1dGVkLlxuICAgIGpzQ29kZVRvRXZhbHVhdGUsIC8vIGphdmFzY3JpcHQgZW5jb2RlZCBhcyBzdHJpbmcgdG8gZXZhbHVhdGUgb24gdGhlIHJlcXVpcmVkIHNjcmlwdC5cbn0pIHtcbiAgICAvLyBzZXQgdGFyZ2V0IHNjcmlwdCBwYXRoIGZvciB0aGUgY29tbWFuZCBsaW5lIGFyZ3VtZW50XG4gICAgcHJvY2Vzcy5hcmd2WzFdID0gc2NyaXB0Q29uZmlnLnBhdGggfHwgcHJvY2Vzcy5hcmd2WzFdIC8vIGluIGNhc2UgcGF0aCBkb2Vzbid0IGV4aXN0LCBrZWVwIGl0IGFzIGlzLlxuXG4gICAgaWYoc2hvdWxkSW5zdGFsbE1vZHVsZSlcbiAgICAgICAgYXdhaXQgaW5zdGFsbEVudHJ5cG9pbnRNb2R1bGUoeyBzY3JpcHRQYXRoOiBzY3JpcHRDb25maWcucGF0aCB9KSAgICBcbiAgICBcbiAgICBpZihqc0NvZGVUb0V2YWx1YXRlKSB7XG4gICAgICAgIHNjcmlwdENvbmZpZy50eXBlID0gJ2V2YWx1YXRlQ29kZSdcbiAgICAgICAgc2NyaXB0Q29uZmlnLmpzQ29kZVRvRXZhbHVhdGUgPSBqc0NvZGVUb0V2YWx1YXRlXG4gICAgfVxuXG4gICAgc2NyaXB0Q29uZmlnLnR5cGUgPSBzY3JpcHRDb25maWcudHlwZSB8fCAnc2NyaXB0JyAvLyBmYWxsYmFjayB0byBkZWZhdWx0XG5cbiAgICBzd2l0Y2ggKHNjcmlwdENvbmZpZy50eXBlKSB7XG4gICAgICAgIGNhc2UgJ3NjcmlwdCc6XG4gICAgICAgICAgICBleGVjdXRlT25SZXF1aXJlKHsgc2NyaXB0UGF0aDogc2NyaXB0Q29uZmlnLnBhdGgsIHBhcmFtZXRlciB9KVxuICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnbW9kdWxlJzogXG4gICAgICAgICAgICBleGVjdXRlT25DYWxsKHsgc2NyaXB0UGF0aDogc2NyaXB0Q29uZmlnLnBhdGgsIG1ldGhvZE5hbWU6IHNjcmlwdENvbmZpZy5tZXRob2ROYW1lLCBwYXJhbWV0ZXIsIGFkYXB0ZXJGdW5jdGlvbjogc2NyaXB0Q29uZmlnLmFkYXB0ZXJGdW5jdGlvbiB9KVxuICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnZXZhbHVhdGVDb2RlJzpcbiAgICAgICAgICAgIGV4ZWN1dGVVc2luZ0FyYml0cmFyeUNvZGUoeyBzY3JpcHRQYXRoOiBzY3JpcHRDb25maWcucGF0aCwganNDb2RlVG9FdmFsdWF0ZTogc2NyaXB0Q29uZmlnLmpzQ29kZVRvRXZhbHVhdGUsIHBhcmFtZXRlciwgYWRhcHRlckZ1bmN0aW9uOiBzY3JpcHRDb25maWcuYWRhcHRlckZ1bmN0aW9uIH0pXG4gICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGDigKIgRmFpbGVkIHRvIGV4ZWN1dGUgc2NyaXB0LCBhcyB0aGUgJ3NjcmlwdENvbmZpZy50eXBlJyBpc24ndCByZWNvZ25pemVkLmApXG4gICAgICAgIGJyZWFrO1xuICAgIH1cbn1cbiJdfQ==