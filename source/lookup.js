"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.scriptLookup = scriptLookup;var _path = _interopRequireDefault(require("path"));
var _configurationManagement = require("@dependency/configurationManagement");
var _listDirectoryContent = require("@dependency/listDirectoryContent");
var _util = _interopRequireDefault(require("util"));

async function scriptLookup({
  script,
  projectRootPath,
  scriptKeyToInvoke })
{
  let scriptConfig, scriptFileConfigArray, scriptDirectoryPathArray;
  switch (typeof script) {
    case 'string':
      scriptConfig = { type: 'script', path: script };
      break;
    case 'object':

      scriptFileConfigArray = script.filter(scriptObject => scriptObject.type != 'directory');

      for (let index in scriptFileConfigArray) {
        if (scriptFileConfigArray[index].path) {
          scriptFileConfigArray[index].path = (0, _configurationManagement.resolveConfigOptionToAbsolutePath)({ optionPath: scriptFileConfigArray[index].path, rootPath: projectRootPath });
        } else {


        }
      }



      scriptConfig = scriptFileConfigArray.find(scriptObject => scriptObject.key == scriptKeyToInvoke);


      scriptDirectoryPathArray = script.
      filter(scriptObject => scriptObject.type == 'directory').
      reduce((accumulator, currentValue) => {
        accumulator.push(currentValue.path);
        return accumulator;
      }, []);

      for (let index in scriptDirectoryPathArray) {
        scriptDirectoryPathArray[index] = (0, _configurationManagement.resolveConfigOptionToAbsolutePath)({ optionPath: scriptDirectoryPathArray[index], rootPath: projectRootPath });
      }

      if (!scriptKeyToInvoke) {

        console.log('• No command argument passed. Please choose a script:');
        if (script.length > 0) {
          console.log(script);
          let scriptInDirectory = (0, _listDirectoryContent.listContent)({ dir: scriptDirectoryPathArray, recursive: false });
          if (scriptInDirectory) {
            console.log(`\n Or \n`);
            scriptInDirectory;
          }
        } else {
          console.log(`• There are no script options, the array is empty. Add scripts to the configuration files.`);
        }
        process.exit(1);
      }

      if (!scriptConfig)
      if (_path.default.isAbsolute(scriptKeyToInvoke)) scriptConfig = { path: scriptKeyToInvoke };else
      {

        let continueLoop = true;
        while (continueLoop && scriptDirectoryPathArray.length > 0) {
          let scriptDirectoryPath = scriptDirectoryPathArray.pop();
          let scriptPath = _path.default.join(scriptDirectoryPath, `${scriptKeyToInvoke}`);

          try {
            require.resolve(scriptPath);

            continueLoop = false;
            scriptConfig = { path: scriptPath };
          } catch (error) {

          }
        }






        if (continueLoop) {
          try {

            let scriptPath = require.resolve(scriptKeyToInvoke, { paths: [projectRootPath, process.cwd()] });
            scriptConfig = { path: scriptPath };
          } catch (error) {

            console.log(`• Failed search for: ${scriptKeyToInvoke}`);

          }
        }
      }

      break;}


  if (!scriptConfig) {
    let errorMessage = `❌ Reached switch default as scriptKeyToInvoke "${scriptKeyToInvoke}" does not match any option.`;
    let scriptListMessage = `scriptList: \n ${_util.default.inspect(script, { colors: true, compact: false })}`;
    throw new Error(`\x1b[41m${errorMessage}\x1b[0m \n ${scriptListMessage}`);
  }

  return scriptConfig;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,