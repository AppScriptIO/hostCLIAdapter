"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.executeUsingArbitraryCode = executeUsingArbitraryCode;var _util = _interopRequireDefault(require("util"));
var _vm = _interopRequireDefault(require("vm"));





function executeUsingArbitraryCode({
  scriptPath,
  jsCodeToEvaluate,
  parameter = {},
  adapterFunction = null })
{
  let scriptModule = require(scriptPath);
  scriptModule = createModuleProxy({ target: scriptModule, adapterFunction, additionalParameter: parameter });

  let contextEnvironment = _vm.default.createContext(Object.assign({

    _requiredModule_: scriptModule,

    parameter: parameter },

  typeof parameter == 'object' ? parameter : {}));

  let vmScript = new _vm.default.Script(`
            _requiredModule_${jsCodeToEvaluate}
        `, {
    filename: scriptPath });

  try {
    vmScript.runInContext(contextEnvironment, {
      breakOnSigint: true });

  } catch (error) {
    console.log(`❌ 'vm.runInContext' ${scriptPath} running in its own context failed.`);
    console.log(`scriptModule/_requiredModule_ (i.e. required script path) is equal to : ${_util.default.inspect(scriptModule, { colors: true, compact: false })}`);
    throw error;
  }
}

function createModuleProxy({
  target,

  additionalParameter,
  adapterFunction })
{
  if (typeof target != 'function' && typeof target != 'object') return target;
  return new Proxy(target, {
    apply: function (_target, thisArg, argumentsList) {
      if (typeof additionalParameter == 'object' && typeof argumentsList[0] == 'object')
        argumentsList[0] = Object.assign(additionalParameter, argumentsList[0]);
      if (adapterFunction)
        return adapterFunction({ callback: _target, args: argumentsList })();else

      return _target(...argumentsList);
    },
    get: (_target, property, receiver) => {
      let propertyValue = Reflect.get(_target, property, receiver);
      return createModuleProxy({ target: propertyValue, adapterFunction, additionalParameter });
    } });

}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,